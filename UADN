import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.autograd import Variable
from torch.nn import Parameter as P
import numpy as np
from network.PixelUnShuffle import PixelUnShuffle
import torch
from torch import nn
import imageio
import time


def conv3x3(in_planes, out_planes, stride=1):
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=True)


class Conv2dBlock(nn.Module):
    def __init__(self, in_dim, out_dim, ks, st, padding=0,
                 norm='none', activation='relu', pad_type='zero',
                 use_bias=True, activation_first=False):
        super(Conv2dBlock, self).__init__()
        self.use_bias = use_bias
        self.activation_first = activation_first
        # initialize padding
        if pad_type == 'reflect':
            self.pad = nn.ReflectionPad2d(padding)
        elif pad_type == 'replicate':
            self.pad = nn.ReplicationPad2d(padding)
        elif pad_type == 'zero':
            self.pad = nn.ZeroPad2d(padding)
        else:
            assert 0, "Unsupported padding type: {}".format(pad_type)

        # initialize normalization
        norm_dim = out_dim
        if norm == 'bn':
            self.norm = nn.BatchNorm2d(norm_dim)
        elif norm == 'in':
            self.norm = nn.InstanceNorm2d(norm_dim)
        elif norm == 'none':
            self.norm = None
        else:
            assert 0, "Unsupported normalization: {}".format(norm)

        # initialize activation
        if activation == 'relu':
            self.activation = nn.ReLU(inplace=True)
        elif activation == 'lrelu':
            self.activation = nn.LeakyReLU(0.2, inplace=True)
        elif activation == 'tanh':
            self.activation = nn.Tanh()
        elif activation == 'sigmoid':
            self.activation = nn.Sigmoid()
        elif activation == 'none':
            self.activation = None
        else:
            assert 0, "Unsupported activation: {}".format(activation)

        self.conv = nn.Conv2d(in_dim, out_dim, ks, st, bias=self.use_bias)

    def forward(self, x):
        if self.activation_first:
            if self.activation:
                x = self.activation(x)
            x = self.conv(self.pad(x))
            if self.norm:
                x = self.norm(x)
        else:
            x = self.conv(self.pad(x))
            if self.norm:
                x = self.norm(x)
            if self.activation:
                x = self.activation(x)
        return x


class CB2(nn.Module):
    def __init__(self, dim=64, drop =True):
        super(CB2, self).__init__()
        self.convOut = nn.Sequential(
            nn.Conv2d(dim, dim, 3, 1, 1, bias=True),
            nn.ReLU(),
            nn.Conv2d(dim, 3, 3, 1, 1, bias=True),
            nn.Tanh()
        )
        self.drop = drop
        if self.drop:
            self.T = 3
        else:
            self.T = 1
        self.convConf = nn.Sequential(
            nn.Conv2d(dim + 3 * self.T, dim, 3, 1, 1, bias=True),
            nn.ReLU(),
            nn.Conv2d(dim, 1, 3, 1, 1, bias=True),
            nn.Sigmoid(),
        )

    def forward(self, x, res):
        # x_u = self.up1(torch.cat([x_d0, F.upsample_bilinear(x, scale_factor=2)], 1))
        # x_u = self.up2(torch.cat([x0, F.upsample_bilinear(x_u, scale_factor=2)], 1))

        xi = 0
        xii = 0
        fs = [x]
        if self.drop:
            for i in range(self.T):
                randIndex = np.arange(x.shape[0])
                np.random.shuffle(randIndex)

                mask = torch.ones_like(x).cuda()
                mask[:, randIndex[0: 4], :, :] = 0

                f = x
                f = f * mask.detach()

                #####################################
                f = res + self.convOut(f)
                xi = xi + f
                xii = xii + f**2
                fs.append(f)

            var = xii / self.T - (xi / self.T)**2
            var = torch.mean(var, dim=1).unsqueeze(dim=1)

            out = xi / self.T
            conf1 = self.convConf(torch.cat(fs, 1))

            conf = 1 - F.sigmoid(1. / conf1 + var)
        else:
            out = res + self.convOut(x)
            conf1 = self.convConf(torch.cat((x, out), 1))
            conf = conf1

        return out, conf1, conf


class ContextBlockUN(nn.Module):
    def __init__(self, inplanes, planes, pool='att', fusions='channel_mul'):
        super(ContextBlockUN, self).__init__()
        assert pool in ['avg', 'att']
        assert len(fusions) > 0, 'at least one fusion should be used'
        self.inplanes = inplanes
        self.planes = planes
        self.pool = pool
        self.fusions = fusions

        if 'att' in pool:
            self.conv_mask = nn.Conv2d(inplanes, 1, kernel_size=1)
            self.softmax = nn.Softmax(dim=2)
        else:
            self.avg_pool = nn.AdaptiveAvgPool2d(1)

        self.channel_mul_conv = nn.Sequential(
            nn.Conv2d(self.inplanes, self.planes, kernel_size=1, bias=True),
            # nn.LayerNorm([self.planes, 1, 1]),
            nn.ReLU(inplace=True),
            nn.Conv2d(self.planes, self.inplanes, kernel_size=1, bias=True)
        )
        self.conv1 = conv3x3(self.planes, self.planes, 1)
        self.conv2 = conv3x3(self.planes, self.planes, 1)

    def forward(self, x, conf):
        residule = x
        out = self.conv1(x)
        out = F.relu(out)
        out = self.conv2(out)

        batch, channel, height, width = out.size()

        context_mask = conf.view(batch, 1, height * width)
        # [N, 1, H * W]
        context_mask = self.softmax(context_mask)
        # [N, 1, H * W, 1]
        context_mask = context_mask.unsqueeze(3)
        # print(context_mask.shape)

        input_x = out.view(batch, channel, height * width)
        # [N, 1, C, H * W]
        input_x = input_x.unsqueeze(1)
        # [N, 1, C, 1]
        context = torch.matmul(input_x, context_mask)
        #[N, C, 1, 1]
        context = context.view(batch, channel, 1, 1)

        # context = F.adaptive_avg_pool2d(x, 1)
        channel_mul_term = torch.sigmoid(self.channel_mul_conv(context))

        ##### visualization channel attention
        # print(channel_mul_term.shape)
        # I = [np.ones((64, 64)) for _ in range(channel)]
        #
        # for i in range(channel):
        #     value = channel_mul_term[:,i, :, :].clamp(0, 1).permute(1, 2, 0).detach().cpu().numpy() * 255.
        #     I[i] = I[i] * value
        #
        # time1 = time.time()
        # I = np.hstack(I)
        # print(I.shape)
        # path = '/home/hm/disk/hm/PycharmProjects/UW_1/DN_top_bot/conf_vis/cha/'
        # paths = path + str(time1) + '.png'
        # imageio.imsave(paths, np.uint8(I[0]))

        out = out * channel_mul_term
        out = residule + out

        return out


class MemoryBlock5(nn.Module):
    """Note: num_memblock denotes the number of MemoryBlock currently"""
    def __init__(self, inplane, channels, num_resblock):
        super(MemoryBlock5, self).__init__()
        modules = []
        for i in range(num_resblock):
            modules.append(ContextBlockUN(channels, channels))

        self.conv = nn.Conv2d(channels, inplane, 3, padding=1)
        self.recursive_unit = nn.Sequential(*modules)

    def forward(self, x, conf, drop=True):
        """ys is a list which contains long-term memory coming from previous memory block
        xs denotes the short-term memory coming from recursive unit
        """
        xs = x
        for layer in self.recursive_unit:
            x = layer(x, conf)

        out = xs + self.conv(x)
        return out


class ULSN5(nn.Module):
    def __init__(self):
        super(ULSN5, self).__init__()
        dim = 64
        input_dim = 3
        activ = 'relu'
        pad_type = 'reflect'
        norm = 'none'

        self.conv0 = nn.Sequential(
            Conv2dBlock(3, dim, 3, 1, 1, norm=norm, activation=activ, pad_type=pad_type),
            # Conv2dBlock(dim, dim, 3, 1, 1, norm=norm, activation=activ, pad_type=pad_type)
        )

        self.down0 =  Conv2dBlock(dim, dim, 4, 2, 1, norm=norm, activation=activ, pad_type=pad_type)
        self.down1 =   Conv2dBlock(dim, dim, 4, 2, 1, norm=norm, activation=activ, pad_type=pad_type)
        FEB = []
        CB = []

        for i in range(6):
            FEB.append(MemoryBlock5(dim, dim, 6))
            CB.append(CB2(dim=dim))

        self.FEB = nn.Sequential(*FEB)
        self.CB = nn.Sequential(*CB)

        self.cb7 = CB2(dim=dim, drop=False)

        self.up1 = nn.Sequential(
            Conv2dBlock(dim*2, dim, 3, 1, 1, norm=norm, activation=activ, pad_type=pad_type)
        )
        self.up2 = nn.Sequential(
            Conv2dBlock(dim*2, dim, 3, 1, 1, norm=norm, activation=activ, pad_type=pad_type)
        )

    def forward(self, x):
        res = x
        x0 = self.conv0(x)
        x_d0 = self.down0(x0)
        x_d = self.down1(x_d0)

        x_r = F.upsample_bilinear(x, scale_factor=1/4)

        LongMemory = x_d

        out = []
        confs = []
        feas = []

        for i in range(6):
            out0, conf0, conf = self.CB[i](LongMemory, x_r)

            f = self.FEB[i](LongMemory, conf)
            LongMemory = LongMemory * conf + f * (1 - conf)

            out.append(out0)
            confs.append(conf0)
            feas.append(LongMemory)
            # imageio.imsave('./conf_vis/iter1_' + str(i) + '_out.png', np.uint8(out0.clamp(0, 1)[0].permute(1, 2, 0).detach().cpu().numpy()*255))
            # imageio.imsave('./conf_vis/iter1_' + str(i) + '_conf.png', np.uint8(conf0.clamp(0, 1)[0].permute(1, 2, 0).detach().cpu().numpy()*255.))

        x_u = self.up1(torch.cat([x_d0, F.upsample_bilinear(LongMemory, size=(x_d0.shape[2], x_d0.shape[3]))], 1))
        x_u = self.up2(torch.cat([x0, F.upsample_bilinear(x_u, size=(x0.shape[2], x0.shape[3]))], 1))
        #
        out7, conf7, conf = self.cb7(x_u, res)

        out.append(out7)
        confs.append(conf7)
        #
        # imageio.imsave('./conf_vis/iter1_' + str(7) + '_out.png', np.uint8(out7.clamp(0, 1)[0].permute(1, 2, 0).detach().cpu().numpy()*255))
        # imageio.imsave('./conf_vis/iter1_' + str(7) + '_conf.png', np.uint8(conf7.clamp(0, 1)[0].permute(1, 2, 0).detach().cpu().numpy()*255))

        return out, confs, feas
